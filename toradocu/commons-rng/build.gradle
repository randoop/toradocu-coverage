def userHome = System.getProperty("user.home")
def mavenCachePath = files(
  "$userHome/.m2/repository/org/openjdk/jmh/jmh-core/1.13/jmh-core-1.13.jar",
  "$userHome/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.13/jmh-generator-annprocess-1.13.jar"
  )

def libraryName = 'commons-rng'
def repoURI = 'https://github.com/randoop/commons-rng.git'

def inputsDir = file("${projectDir}/inputs")
def libraryScriptPath = "${inputsDir}/${libraryName}/pom.xml"

def libraryDirs = [
  "${inputsDir}/${libraryName}/commons-rng-client-api/src/main/java",
  "${inputsDir}/${libraryName}/commons-rng-core/src/main/java",
  "${inputsDir}/${libraryName}/commons-rng-jmh/src/main/java",
  "${inputsDir}/${libraryName}/commons-rng-sampling/src/main/java",
  "${inputsDir}/${libraryName}/commons-rng-simple/src/main/java"
  ]
def libraryJars = [
  "${inputsDir}/${libraryName}/commons-rng-client-api/target/commons-rng-client-api-1.1-SNAPSHOT.jar",
  "${inputsDir}/${libraryName}/commons-rng-core/target/commons-rng-core-1.1-SNAPSHOT.jar",
  "${inputsDir}/${libraryName}/commons-rng-jmh/target/commons-rng-jmh-1.1-SNAPSHOT.jar",
  "${inputsDir}/${libraryName}/commons-rng-sampling/target/commons-rng-sampling-1.1-SNAPSHOT.jar",
  "${inputsDir}/${libraryName}/commons-rng-simple/target/commons-rng-simple-1.1-SNAPSHOT.jar"
  ]
def libraryClassPath = files(libraryJars, mavenCachePath).asPath

dependencies {
  testCompile files(libraryClassPath)
  testCompile group: 'junit', name: 'junit', version: '4.+'
  testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

task getInputs {
  description 'Places source library in inputs directory'
  doLast {
    def libInputsDir = file("${inputsDir}/${libraryName}")
    if (!libInputsDir.exists()) {
      org.ajoberstar.grgit.Grgit.clone(dir: libInputsDir, uri: repoURI)
    } else {
      println("WARNING: not cloning repo because already exists.")
      println("         Force clone by running with cleanInputs")
    }
  }
}

/*
 * Compiles the source files
 */
task compileInputs(type: Exec, dependsOn: getInputs) {
  description "Compile subject library"
  commandLine "mvn", "-B", "-f", libraryScriptPath, "package", "-DskipTests", "-DMaven.test.skip=true"
  outputs.files(libraryJars)
}

task cleanCompileInputs(type: Exec) {
  description "Invokes clean task for subject library"
  commandLine "mvn", "-B", "-f", libraryScriptPath, "clean"
}

/*
 * Deletes files created by the `getInputs` task.
 */
task cleanInputs(type: Delete) {
  delete 'inputs'
}

// Dummy
task makeResourceDir() {
}
