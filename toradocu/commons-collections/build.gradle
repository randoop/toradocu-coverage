/* commons-collections */

def libraryName = 'commons-collections'
def libraryJar = 'commons-collections4-4.2-SNAPSHOT.jar'
def repoURI = 'https://github.com/randoop/commons-collections.git'

def inputsDir = file("${projectDir}/inputs")
def resourceDirPath = "${projectDir}/resources"
def librarySrcDir = "${inputsDir}/${libraryName}/src/main/java"
def libraryJarPath = "${inputsDir}/${libraryName}/target/${libraryJar}"
def libraryScriptPath = "${inputsDir}/${libraryName}/pom.xml"

// common resources in top-level directory
def randoopJar = "${rootProject.projectDir}/libs/randoop.jar"
def replacecallJar = "${rootProject.projectDir}/libs/replacecall.jar"

dependencies {
  testCompile files(libraryJarPath)
  testCompile files(replacecallJar)
  testCompile group: 'junit', name: 'junit', version: '4.+'
  testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

//--- build aliases : define a synonym here if you want a shortcut to run multiple targets
// Note that this is a 'trick' to enforce textual order on dependencies.

def buildAliases = [
  'prepareForRandoop'  : ['getInputs', 'makeResourceDir', 'compileInputs'],
  'prepareForCoverage' : ['cleanRandoop', 'cleanTest', 'runRandoop', 'compileTestJava']
]
def expandedTaskList = []

gradle.startParameter.taskNames.each {
  expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}

gradle.startParameter.taskNames = expandedTaskList.flatten()

println "\nexpanded task list: ${gradle.startParameter.taskNames }\n"


/**** Tasks for managing a local copy of the project ****/

/*
 * Download a copy of the project
 */
task getInputs {
  description 'Places source library in inputs directory'
  doLast {
    def libInputsDir = file("${inputsDir}/${libraryName}")
    if (!libInputsDir.exists()) {
      org.ajoberstar.grgit.Grgit.clone(dir: libInputsDir, uri: repoURI)
    } else {
      println("WARNING: not cloning repo because already exists.")
      println("         Force clone by running with cleanInputs")
    }
  }
}

/*
 * Compiles the source files
 */
task compileInputs(type: Exec, dependsOn: getInputs) {
  description "Compile subject library"
  commandLine "mvn", "-B", "-f", libraryScriptPath, "-Dmaven.test.skip=true", "package"
  outputs.file(libraryJarPath)
}

task cleanCompileInputs(type: Exec) {
  description "Invokes clean task for subject library"
  commandLine "mvn", "-B", "-f", libraryScriptPath, "clean"
}

/*
 * Deletes files created by the `getInputs` task.
 */
task cleanInputs(type: Delete) {
  delete 'inputs'
}

task makeResourceDir() {
  def resourceDir = file("$resourceDirPath")
  outputs.dir { resourceDir}
  doLast() {
    if (!resourceDir.exists()) {
      file(resourceDir).mkdirs()
    }
  }
}

/**** Randoop tasks ****/

task runRandoop(dependsOn: [getInputs, makeResourceDir, compileInputs]) {
  group 'test generation'
  description "Runs Randoop to first error test (or 15 minutes) on resources/evallist.txt"
  def inputClasspath = libraryJarPath
  def classpath = files(inputClasspath, randoopJar).asPath
  def cmd = "java -ea -cp ${classpath} -Xbootclasspath/a:${replacecallJar} -javaagent:${replacecallJar} randoop.main.Main gentests"
  def outputDir = "${projectDir}/src/test/java"
  def options = [
    "--testjar=${libraryJarPath}",
    "--time-limit=900",
    "--stop-on-error-test=false",
    "--junit-output-dir=${outputDir}",
    "--flaky-test-behavior=output",
    "--no-error-revealing-tests",
    "--junit-reflection-allowed=false",
    "--usethreads",
//    "--omit-classes=${omittedClasses}",
//    "--omitmethods=${omittedMethods}",
    "--output-limit=2000"
  ]
  inputs.file(inputClasspath)
  inputs.file(libraryJarPath)
  outputs.dir(file(outputDir))
  doLast {
    def classDirPath = "${inputsDir}/${libraryName}/target/classes"
    def dirListFile = new File("${resourceDirPath}/classdir.txt")
    def writerD = dirListFile.newWriter()
    writerD << classDirPath + "\n"
    writerD.close()
    def pathListFile = new File("${resourceDirPath}/classpath.txt")
    def writerP = pathListFile.newWriter()
    writerP << classpath + "\n"
    writerP.close()
    if (!file(outputDir).exists()) {
      file(outputDir).mkdirs()
    }
    project.exec {
      commandLine = cmd.split().toList() + options
      println(commandLine)
    }
  }
}

task cleanRandoop(type: Delete) {
  description 'Removes Randoop generated tests'
  delete fileTree('src/test/') {
    include '**/*.java'
  }
}

task cleanTest(type: Delete) {
  description 'Removes class files for Randoop generated tests'
  delete fileTree('build/classes/test/') {
    include '**/*.class'
  }
}

